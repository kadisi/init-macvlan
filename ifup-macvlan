#!/bin/bash
#
# initscripts-macvlan
# Copyright (C) 2014 Lars Kellogg-Stedman
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. /etc/init.d/functions

cd /etc/sysconfig/network-scripts
. ./network-functions

[ -f ../network ] && . ../network

CONFIG=${1}

need_config ${CONFIG}

source_config

if [ -z "$MACVLAN_PARENT" ]; then
    net_log "Macvlan must set master device name, please set MACVLAN_PARENT"
    exit 1
fi

if [ -z "$DEVICE" ]; then
    net_log "Macvlan must set device name, please set DEVICE"
    exit 1
fi


ip link add \
	link ${MACVLAN_PARENT} \
	name ${DEVICE} \
	type ${TYPE:-macvlan} mode ${MACVLAN_MODE:-bridge}

net_log "create macvlan use ${MACVLAN_MODE:-bridge} mode " info 

# set ip addr
if [ -z "${IPADDR}" -a -z "${IPADDR0}" -a -z "${IPADDR1}" -a -z "${IPADDR2}" ]; then
    # enable device without IP, useful for e.g. PPPoE
    ip link set dev ${REALDEVICE} up
    ethtool_set
    [ -n "${LINKDELAY}" ] && /bin/sleep ${LINKDELAY}
else

    expand_config

    [ -n "${ARP}" ] && \
        ip link set dev ${REALDEVICE} $(toggle_value arp $ARP)

    if ! ip link set dev ${REALDEVICE} up ; then
        net_log $"Failed to bring up ${DEVICE}."
        exit 1
    fi

    ethtool_set

    [ -n "${LINKDELAY}" ] && /bin/sleep ${LINKDELAY}

    if [ "${DEVICE}" = "lo" ]; then
        SCOPE="scope host"
    else
        SCOPE=${SCOPE:-}
    fi

    if [ -n "$SRCADDR" ]; then
        SRC="src $SRCADDR"
    else
        SRC=
    fi

    # set IP address(es)
    for idx in {0..256} ; do
	# ipaddr 这个数组 在expand_config 函数中执行的
        if [ -z "${ipaddr[$idx]}" ]; then
            break
        fi

	# LC_ALL=C 是为了去除所有本地化的设置，让命令能正确执行。 
        if ! LC_ALL=C ip addr ls ${REALDEVICE} | LC_ALL=C grep -q "${ipaddr[$idx]}/${prefix[$idx]}" ; then
            if [ "${REALDEVICE}" != "lo" ] && [ "${arpcheck[$idx]}" != "no" ] ; then
                ARPING=$(/sbin/arping -c 2 -w ${ARPING_WAIT:-3} -D -I ${REALDEVICE} ${ipaddr[$idx]})
                if [ $? = 1 ]; then
                    ARPINGMAC=$(echo $ARPING |  sed -ne 's/.*\[\(.*\)\].*/\1/p')
                    net_log $"Error, some other host ($ARPINGMAC) already uses address ${ipaddr[$idx]}."
                    exit 1
                fi
            fi

            if ! ip addr add ${ipaddr[$idx]}/${prefix[$idx]} \
                brd ${broadcast[$idx]:-+} dev ${REALDEVICE} ${SCOPE} label ${DEVICE}; then
                net_log $"Error adding address ${ipaddr[$idx]} for ${DEVICE}."
            fi
        fi

        if [ -n "$SRCADDR" ]; then
            sysctl -w "net.ipv4.conf.${SYSCTLDEVICE}.arp_filter=1" >/dev/null 2>&1
        fi

        # update ARP cache of neighboring computers
        if ! is_false "${arpupdate[$idx]}" && [ "${REALDEVICE}" != "lo" ]; then
            /sbin/arping -q -A -c 1 -I ${REALDEVICE} ${ipaddr[$idx]}
            ( sleep 2;
            /sbin/arping -q -U -c 1 -I ${REALDEVICE} ${ipaddr[$idx]} ) > /dev/null 2>&1 < /dev/null &
        fi

        # set lifetime of address to forever
        ip addr change ${ipaddr[$idx]}/${prefix[$idx]} dev ${REALDEVICE} valid_lft forever preferred_lft forever
    done

    # Set a default route.
    if [ "${DEFROUTE}" != "no" ] && [ -z "${GATEWAYDEV}" -o "${GATEWAYDEV}" = "${REALDEVICE}" ]; then
        # set up default gateway. replace if one already exists
        if [ -n "${GATEWAY}" ] && [ "$(ipcalc --network ${GATEWAY} ${netmask[0]} 2>/dev/null)" = "NETWORK=${NETWORK}" ]; then
            ip route replace default ${METRIC:+metric $METRIC} \
                ${EXTRA_ROUTE_OPTS} \
                via ${GATEWAY} ${WINDOW:+window $WINDOW} ${SRC} \
                ${GATEWAYDEV:+dev $GATEWAYDEV} ||
                net_log $"Error adding default gateway ${GATEWAY} for ${DEVICE}."
        elif [ "${GATEWAYDEV}" = "${DEVICE}" ]; then
            ip route replace default ${METRIC:+metric $METRIC} \
                ${EXTRA_ROUTE_OPTS} \
                ${SRC} ${WINDOW:+window $WINDOW} dev ${REALDEVICE} ||
                net_log $"Error adding default gateway for ${REALDEVICE}."
        fi
    fi
fi

